/* Copyright 2021 The Chromium OS Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/dts-v1/;

#include <cros/ite/it8xxx2.dtsi>
#include <dt-bindings/gpio_defines.h>
#include <it8xxx2.dtsi>

/ {
	model = "IT8XXX2 EV-Board";

	chosen {
		zephyr,sram = &sram0;
		zephyr,console = &uart1;
		zephyr,shell-uart = &uart1;
		zephyr,flash = &flash0;
		zephyr,flash-controller = &flashctrl;
	};

	pwmleds {
		compatible = "pwm-leds";

		/* NOTE: &pwm number needs same with channel number */
		pwm_led_test: pwm_led_test {
			pwms = <&pwm0 PWM_CHANNEL_0 PWM_POLARITY_NORMAL>;
		};
	};

	aliases {
		gpio-wp = &gpio_wp;
	};

	named-gpios {
		compatible = "named-gpios";

		power_button_l: power_button_l {
			gpios = <&gpioe 4 GPIO_INPUT_PULL_UP>;
			enum-name = "GPIO_POWER_BUTTON_L";
		};
		lid_open: lid_open {
			gpios = <&gpioe 2 GPIO_INPUT_PULL_UP>;
			enum-name = "GPIO_LID_OPEN";
		};
		gpio_wp: wp_l {
			gpios = <&gpioi 4 (GPIO_INPUT_PULL_UP |
					   GPIO_ACTIVE_LOW)>;
		};
		pch_pltrst_l {
			gpios = <&gpioe 3 GPIO_INPUT_PULL_UP>;
			enum-name = "GPIO_PCH_RSMRST_L";
		};
		sys_reset_l {
			gpios = <&gpiob 6 GPIO_OUTPUT_HIGH>;
			enum-name = "GPIO_SYS_RESET_L";
		};
		gpio_ec_pch_wake_odl: pch_wake_l {
			gpios = <&gpiob 7 GPIO_OUTPUT_HIGH>;
		};
		i2c_a_scl {
			gpios = <&gpiob 3 GPIO_INPUT>;
		};
		i2c_a_sda {
			gpios = <&gpiob 4 GPIO_INPUT>;
		};
		i2c_b_scl {
			gpios = <&gpioc 1 GPIO_INPUT>;
		};
		i2c_b_sda {
			gpios = <&gpioc 2 GPIO_INPUT>;
		};
		i2c_c_scl {
			gpios = <&gpiof 6 GPIO_INPUT>;
		};
		i2c_c_sda {
			gpios = <&gpiof 7 GPIO_INPUT>;
		};
		i2c_e_scl {
			gpios = <&gpioe 0 GPIO_INPUT>;
		};
		i2c_e_sda {
			gpios = <&gpioe 7 GPIO_INPUT>;
		};

		spi0_cs: spi0_cs {
			gpios = <&gpiom 5 (GPIO_INPUT | GPIO_VOLTAGE_1P8)>;
		};
	};

	hibernate-wake-pins {
		compatible = "cros-ec,hibernate-wake-pins";
		wakeup-irqs = <&int_power_button
			       &int_lid_open>;
	};

	named-adc-channels {
		compatible = "named-adc-channels";

		adc_vbussa: vbussa {
			label = "ADC_VBUSSA";
			enum-name = "ADC_VBUS";
			io-channels = <&adc0 0>;
		};
		adc_vbussb: vbussb {
			label = "ADC_VBUSSB";
			enum-name = "ADC_PSYS";
			io-channels = <&adc0 1>;
		};
		adc_evb_ch_13: evb_ch_13 {
			label = "ADC_EVB_CH_13";
			enum-name = "ADC_AMON_BMON";
			io-channels = <&adc0 2>;
		};
		adc_evb_ch_14: evb_ch_14 {
			label = "ADC_EVB_CH_14";
			enum-name = "ADC_TEMP_SENSOR_FAN";
			io-channels = <&adc0 3>;
		};
		adc_evb_ch_15: evb_ch_15 {
			label = "ADC_EVB_CH_15";
			enum-name = "ADC_TEMP_SENSOR_DDR_SOC";
			io-channels = <&adc0 4>;
		};
		adc_evb_ch_16: evb_ch_16 {
			label = "ADC_EVB_CH_16";
			enum-name = "ADC_TEMP_SENSOR_CHARGER";
			io-channels = <&adc0 5>;
		};
	};

	named-i2c-ports {
		compatible = "named-i2c-ports";

		battery {
			i2c-port = <&i2c2>;
			enum-name = "I2C_PORT_BATTERY";
		};
		evb-1 {
			i2c-port = <&i2c0>;
			enum-name = "I2C_PORT_EVB_1";
		};
		evb-2 {
			i2c-port = <&i2c1>;
			enum-name = "I2C_PORT_EVB_2";
		};
		opt-4 {
			i2c-port = <&i2c4>;
			enum-name = "I2C_PORT_OPT_4";
		};
	};

	named-fans {
		compatible = "named-fans";

		fan_0 {
			label = "FAN_0";
			pwms = <&pwm7 PWM_CHANNEL_7 PWM_POLARITY_NORMAL>;
			pwm-frequency = <30000>;
			tach = <&tach0>;
			rpm_min = <1500>;
			rpm_start = <1500>;
			rpm_max = <6500>;
		};
	};

	unused-pins {
		compatible = "unused-gpios";

		unused-gpios =
			/* gpioa1 */
			<&gpioa 1 GPIO_INPUT_PULL_DOWN>,
			/* gpioa2 */
			<&gpioa 2 GPIO_INPUT_PULL_DOWN>,
			/* gpioa3 */
			<&gpioa 3 GPIO_INPUT_PULL_DOWN>,
			/* gpioa4 */
			<&gpioa 4 GPIO_INPUT_PULL_DOWN>,
			/* gpioa5 */
			<&gpioa 5 GPIO_INPUT_PULL_DOWN>,

			/* gpiob2 */
			<&gpiob 2 GPIO_INPUT_PULL_DOWN>,
			/* gpiob5 */
			<&gpiob 5 GPIO_INPUT_PULL_DOWN>,

			/* gpioc0 */
			<&gpioc 0 GPIO_INPUT_PULL_DOWN>,
			/* gpioc4 */
			<&gpioc 4 GPIO_INPUT_PULL_DOWN>,
			/* gpioc6 */
			<&gpioc 6 GPIO_INPUT_PULL_DOWN>,
			/* gpioc7 */
			<&gpioc 7 GPIO_INPUT_PULL_DOWN>,

			/* gpiod0 */
			<&gpiod 0 GPIO_INPUT_PULL_DOWN>,
			/* gpiod1 */
			<&gpiod 1 GPIO_INPUT_PULL_DOWN>,
			/* gpiod2 */
			<&gpiod 2 GPIO_INPUT_PULL_DOWN>,
			/* gpiod3 */
			<&gpiod 3 GPIO_INPUT_PULL_DOWN>,
			/* gpiod4 */
			<&gpiod 4 GPIO_INPUT_PULL_DOWN>,
			/* gpiod5 */
			<&gpiod 5 GPIO_INPUT_PULL_DOWN>,
			/* gpiod7 */
			<&gpiod 7 GPIO_INPUT_PULL_DOWN>,

			/* gpioe1 */
			<&gpioe 1 GPIO_INPUT_PULL_DOWN>,
			/* gpioe5 */
			<&gpioe 5 GPIO_INPUT_PULL_DOWN>,
			/* gpioe6 */
			<&gpioe 6 GPIO_INPUT_PULL_DOWN>,

			/* gpiof0 */
			<&gpiof 0 GPIO_INPUT_PULL_DOWN>,
			/* gpiof1 */
			<&gpiof 1 GPIO_INPUT_PULL_DOWN>,
			/* gpiof2 */
			<&gpiof 2 GPIO_INPUT_PULL_DOWN>,
			/* gpiof3 */
			<&gpiof 3 GPIO_INPUT_PULL_DOWN>,
			/* gpiof4 */
			<&gpiof 4 GPIO_INPUT_PULL_DOWN>,
			/* gpiof5 */
			<&gpiof 5 GPIO_INPUT_PULL_DOWN>,

			/* gpiog1 */
			<&gpiog 1 GPIO_INPUT_PULL_DOWN>,
			/* gpiog6 */
			<&gpiog 6 GPIO_INPUT_PULL_UP>,

			/* gpioh0 */
			<&gpioh 0 GPIO_INPUT_PULL_DOWN>,
			/* gpioh3 */
			<&gpioh 3 GPIO_INPUT_PULL_DOWN>,
			/* gpioh4 */
			<&gpioh 4 GPIO_INPUT_PULL_DOWN>,
			/* gpioh5 */
			<&gpioh 5 GPIO_INPUT_PULL_DOWN>,
			/* gpioh6 */
			<&gpioh 6 GPIO_INPUT_PULL_DOWN>,

			/* gpioi6 */
			<&gpioi 6 GPIO_INPUT_PULL_DOWN>,
			/* gpioi7 */
			<&gpioi 7 GPIO_INPUT_PULL_DOWN>,

			/* gpioj0 */
			<&gpioj 0 GPIO_INPUT_PULL_DOWN>,
			/* gpioj1 */
			<&gpioj 1 GPIO_INPUT_PULL_DOWN>,
			/* gpioj2 */
			<&gpioj 2 GPIO_INPUT_PULL_DOWN>,
			/* gpioj3 */
			<&gpioj 3 GPIO_INPUT_PULL_DOWN>,
			/* gpioj4 */
			<&gpioj 4 GPIO_INPUT_PULL_DOWN>,
			/* gpioj5 */
			<&gpioj 5 GPIO_INPUT_PULL_DOWN>,
			/* gpioj6 */
			<&gpioj 6 GPIO_OUTPUT_LOW>,
			/* gpioj7 */
			<&gpioj 7 GPIO_OUTPUT_LOW>,

			/* gpiom0 */
			<&gpiom 0 GPIO_INPUT_PULL_DOWN>,
			/* gpiom1 */
			<&gpiom 1 GPIO_INPUT_PULL_DOWN>,
			/* gpiom2 */
			<&gpiom 2 GPIO_INPUT_PULL_DOWN>,
			/* gpiom3 */
			<&gpiom 3 GPIO_INPUT_PULL_DOWN>,
			/* gpiom4 */
			<&gpiom 4 GPIO_INPUT_PULL_DOWN>,
			/* gpiom6 */
			<&gpiom 6 GPIO_INPUT_PULL_DOWN>;
	};
};

&adc0 {
	status = "okay";
};

&i2c0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

&i2c1 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

&i2c2 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

&i2c4 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

&uart1 {
	status = "okay";
	current-speed = <115200>;
	clock-frequency = <1804800>;
};

&ite_uart1_wrapper {
	status = "okay";
};

/* pwm for test */
&pwm0 {
	status = "okay";
	prescaler-cx = <PWM_PRESCALER_C6>;
};

/* pwm for fan */
&pwm7 {
	status = "okay";
	prescaler-cx = <PWM_PRESCALER_C4>;
};

/* fan tachometer sensor */
&tach0 {
	status = "okay";
	channel = <IT8XXX2_TACH_CHANNEL_A>;
	pulses-per-round = <2>;
};
