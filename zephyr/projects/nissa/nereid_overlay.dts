/* Copyright 2021 The Chromium OS Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

#include <cros/thermistor/thermistor.dtsi>

/ {
	aliases {
		gpio-cbi-wp = &gpio_ec_cbi_wp;
		gpio-wp = &gpio_ec_wp_odl;
		int-wp = &int_wp_l;
	};

	batteries {
		default_battery: smp {
			compatible = "smp,l20m3pg0";
		};
	};

	hibernate-wake-pins {
		compatible = "cros-ec,hibernate-wake-pins";
		wakeup-irqs = <
			&int_power_button
			&int_lid_open
		>;
	};

	gpio-interrupts {
		compatible = "cros-ec,gpio-interrupts";

		int_power_button: power_button {
			irq-pin = <&gpio_gsc_ec_pwr_btn_odl>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "power_button_interrupt";
		};
		int_wp_l: wp_l {
			irq-pin = <&gpio_ec_wp_odl>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "switch_interrupt";
		};
		int_lid_open: lid_open {
			irq-pin = <&gpio_lid_open>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "lid_interrupt";
		};
		int_tablet_mode: tablet_mode {
			irq-pin = <&gpio_tablet_mode_l>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "gmr_tablet_switch_isr";
		};
		int_imu: ec_imu {
		  irq-pin = <&gpio_imu_int_l>;
		  flags = <GPIO_INT_EDGE_FALLING>;
		  handler = "bmi3xx_interrupt";
		};
		int_usb_c0: usb_c0 {
			irq-pin = <&gpio_usb_c0_int_odl>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "usb_c0_interrupt";
		};
		int_usb_c1: usb_c1 {
			irq-pin = <&gpio_sb_1>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "usb_c1_interrupt";
		};
		int_prochot: ap_prochot {
			irq-pin = <&gpio_ec_prochot_odl>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "throttle_ap_prochot_input_interrupt";
		};
	};

	named-gpios {
		/*
		 * EC doesn't take any specific action on CC/SBU disconnect due to
		 * fault, but this definition is useful for hardware testing.
		 */
		gpio_usb_c0_prot_fault_odl: usb_c0_prot_fault_odl {
			gpios = <&gpiok 6 GPIO_INPUT_PULL_UP>;
		};

		gpio_sb_1: sb_1 {
			gpios = <&gpioe 6 GPIO_INPUT_PULL_UP>;
			no-auto-init;
		};
		gpio_sb_2: sb_2 {
			gpios = <&gpiof 0 GPIO_OUTPUT>;
			no-auto-init;
		};

		gpio_sb_3: sb_3 {
			gpios = <&gpioe 7 GPIO_OPEN_DRAIN>;
			no-auto-init;
		};
		gpio_sb_4: sb_4 {
			gpios = <&gpioe 0 GPIO_INPUT>;
			no-auto-init;
		};
	};

	/*
	 * Aliases used for sub-board GPIOs.
	 */
	aliases {
		/*
		 * Input GPIO when used with type-C port 1
		 * Output when used with HDMI sub-board
		 */
		gpio-usb-c1-int-odl = &gpio_sb_1;
		gpio-en-rails-odl = &gpio_sb_1;
		/*
		 * Sub-board with type A USB, enable.
		 */
		gpio-en-usb-a1-vbus = &gpio_sb_2;
		/*
		 * HPD pins for HDMI sub-board.
		 */
		gpio-hdmi-en-odl = &gpio_sb_3;
		gpio-hpd-odl = &gpio_sb_4;
	};

	named-temp-sensors {
		memory {
			compatible = "cros-ec,temp-sensor-thermistor";
			thermistor = <&thermistor_3V3_51K1_47K_4050B>;
			label = "DDR and SOC";
			enum-name = "TEMP_SENSOR_1";
			temp_fan_off = <35>;
			temp_fan_max = <60>;
			temp_host_high = <85>;
			temp_host_halt = <90>;
			temp_host_release_high = <80>;
			adc = <&adc_temp_sensor_1>;
		};
		charger {
			compatible = "cros-ec,temp-sensor-thermistor";
			thermistor = <&thermistor_3V3_51K1_47K_4050B>;
			label = "Charger";
			enum-name = "TEMP_SENSOR_CHARGER";
			temp_fan_off = <35>;
			temp_fan_max = <60>;
			temp_host_high = <85>;
			temp_host_halt = <90>;
			temp_host_release_high = <80>;
			adc = <&adc_temp_sensor_2>;
		};
		ambient {
			compatible = "cros-ec,temp-sensor-thermistor";
			thermistor = <&thermistor_3V3_51K1_47K_4050B>;
			label = "Ambient";
			enum-name = "TEMP_SENSOR_AMB";
			temp_fan_off = <35>;
			temp_fan_max = <60>;
			temp_host_high = <85>;
			temp_host_halt = <90>;
			temp_host_release_high = <80>;
			adc = <&adc_temp_sensor_3>;
		};
	};

	usbc {
		port0 {
			bc12 {
				compatible = "pericom,pi3usb9201";
				port = <&i2c_ec_i2c_usb_c0>;
			};
		};
		port1 {
			bc12 {
				compatible = "pericom,pi3usb9201";
				port = <&i2c_ec_i2c_sub_usb_c1>;
			};
		};
	};
};

&thermistor_3V3_51K1_47K_4050B {
	status = "okay";
};

&adc_ec_vsense_pp3300_s5 {
	/*
	 * Voltage divider on input has 47k upper and 220k lower legs with 3 V
	 * full-scale reading on the ADC. Apply the largest possible multiplier
	 * (without overflowing int32) to get the best possible approximation
	 * of the actual ratio, but derate by a factor of two to ensure
	 * unexpectedly high values won't overflow.
	 */
	mul = <(715828 / 2)>;
	div = <(589820 / 2)>;
};

/* Set bus speeds for I2C */
&i2c0 {
	label = "I2C_EEPROM";
	clock-frequency = <I2C_BITRATE_FAST>;

	cbi_eeprom: eeprom@50 {
		compatible = "atmel,at24";
		reg = <0x50>;
		label = "EEPROM_CBI";
		size = <2048>;
		pagesize = <16>;
		address-width = <8>;
		timeout = <5>;
	};
};

&i2c1 {
	label = "I2C_BATTERY";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

&i2c2 {
	label = "I2C_SENSOR";
	clock-frequency = <I2C_BITRATE_FAST>;
};

&i2c4 {
	label = "I2C_SUB_C1_TCPC";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;
};

&i2c5 {
	label = "I2C_USB_C0_TCPC";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;
};

/* PWM config */
&pwm0 {
	prescaler-cx = <PWM_PRESCALER_C4>;
};

&pwm1 {
	prescaler-cx = <PWM_PRESCALER_C4>;
};

&pwm2 {
	prescaler-cx = <PWM_PRESCALER_C4>;
};

&pwm3 {
	prescaler-cx = <PWM_PRESCALER_C4>;
};

&pwm_pwm_kb_bl {
	frequency = <10000>;
};

&pwm_pwm_led_1_odl {
	frequency = <324>;
};

&pwm_pwm_led_2_odl {
	frequency = <324>;
};

&pwm_pwm_led_3_odl {
	frequency = <324>;
};
