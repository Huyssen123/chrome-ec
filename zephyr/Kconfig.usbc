# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

menuconfig PLATFORM_EC_USBC
	bool "USB Type-C"
	default y if PLATFORM_EC_BATTERY
	depends on PLATFORM_EC_MATH_UTIL
	help
	  Enable this to support various USB Type-C features chosen by the
	  options below. USB-C is widely used on modern Chromebooks and the EC's
	  role is to negotiate power contracts (for sourcing or sinking power
	  over USB). The EC is also responsible for discovering the capabilities
	  of attached USB-C partners and enabling alternate operational modes,
	  including Display Port, Thunderbolt, and USB4.

rsource "Kconfig.retimer"
rsource "Kconfig.pd_int_shared"
rsource "Kconfig.pd_meas_vbus"
rsource "Kconfig.pd_frs"
rsource "Kconfig.pd_discharge"
rsource "Kconfig.pd_vbus_detection"
rsource "Kconfig.pd_console_cmd"
rsource "Kconfig.pd_usbc_device_type"
rsource "Kconfig.pd"
rsource "Kconfig.ppc"

if PLATFORM_EC_USBC

config PLATFORM_EC_CHARGER_INPUT_CURRENT
	int "Charger input current in mA"
	depends on PLATFORM_EC_CHARGE_MANAGER
	default 512
	help
	  This is the default input current for the board in mA.  Many boards
	  also use this as the least maximum input current during transients.

	  This value should depend on external power adapter, designed charging
	  voltage, and the maximum power of the running system. For type-C
	  chargers, this should be set to 512 mA in order to not brown-out
	  low-current USB charge ports in accordance with USB-PD r3.0 Sec. 7.3

config PLATFORM_EC_USBC_OCP
	bool
	help
	  USB-C overcurrent protection: Enable this to detect when a connected
	  USB-C partner draws too much power from the Chromebook and
	  automatically shut off power to the USB-C partner.

	  This should be enabled by drivers which can detect over-current. It
	  cannot be set otherwise, even in prj.conf

config PLATFORM_EC_USB_PID
	hex "USB Product ID"
	help
	  Each platform (e.g. baseboard set) should have a single VID/PID
	  combination. If there is a big enough change within a platform,
	  then we can differentiate USB topologies by varying the hardware
	  version field in the Sink and Source Capabilities Extended messages.

	  To reserve a new PID within Google, use go/usb and see
	  http://google3/hardware/standards/usb

config PLATFORM_EC_USB_BCD_DEV
	hex "USB Device ID"
	default 0
	help
	  This specifies the USB device version, reported by board when acting
	  as the upstream facing port (UFP). This is a 16-bit unsigned integer
	  and should be set to a version number relevant to the release version
	  of the product.

config PLATFORM_EC_USB_VID
	hex "USB Vendor ID"
	default 0x18d1
	help
	  This specifies the USB vendor ID used for boards which expose a
	  USB endpont when the port is in UFP mode. The default value is
	  set to Google's assigned VID and typically would not need to be
	  changed. But, in certain cases this may need to be changed to
	  match an OEM's vendor ID.

config PLATFORM_EC_USB_MS_EXTENDED_COMPAT_ID_DESCRIPTOR
	bool "USB MS Extended Compat ID Feature Descriptor"
	help
	  This enables USB-EP to contain a MS Windows USB string descriptor
	  which is then used by MS Windows to request a Extended Compatible
	  ID Feature descriptor so that Windows will know to load its WINUSB
	  driver.

config PLATFORM_EC_USB_PD_TCPC_LOW_POWER
	bool "Allow Type-C Port Controller to enter low-power mode"
	default y
	help
	  Allows entry to a low power mode when the USB port is idle.
	  When enabled, an enter_low_power_mode member is present in tcpm_drv
	  and should be set to a function that selects that mode, such as
	  tcpci_enter_low_power_mode() for TCPCI-compatible TCPCs.

config PLATFORM_EC_USB_PD_TCPC_LPM_EXIT_DEBOUNCE_US
	int "Debounce delay when exiting low-power mode (uS)"
	depends on PLATFORM_EC_USB_PD_TCPC_LOW_POWER
	default 25000
	help
	  Some TCPCs need additional time following a VBUS change to internally
	  debounce the CC line status and update the CC_STATUS register. This
	  is the delay in microseconds to allow before checking the CC line
	  status in the EC.

config PLATFORM_EC_USB_PD_TCPC_VCONN
	bool "If VCONN is enabled, the TCPC will provide VCONN"
	default y if !PLATFORM_EC_USBC_PPC_SYV682X
	default y if PLATFORM_EC_USB_PD_TCPM_ITE_ON_CHIP
	default y if PLATFORM_EC_USBC_PPC_SYV682X_NO_CC
	help
	  Source USB Type-C connector voltage (VCONN) from the Type-C Port
	  Controller (TCPC), and also the Power Path Controller (PPC) if
	  present. Some TCPC/PPC can't handle 5V on its host-side CC pins, so
          disable this config in those cases.

choice "Type-C Port Manager (TCPM)"
	prompt "Choose a Type-C Port Manager (TCPM) to manage TCPC"

config PLATFORM_EC_USB_PD_TCPM_TCPCI
	bool "Use TCPCI"
	select PLATFORM_EC_USBC_OCP
	help
	  Enable a TCPC compatible with the Type-C Port Controller Interface
	  (TCPCI) Specification. This driver supports both Rev1 v1.2 and Rev2
	  v1.0 of the TCPCI specification. Select this driver directly only
	  if your specific TCPC chip is not listed as a separate config option.

	  Note: most of the TCPC will depend on PLATFORM_EC_USB_PD_TCPM_TCPCI.

# TODO: Add other choices:
#  CONFIG_USB_PD_TCPM_STUB
#  CONFIG_USB_PD_TCPM_FUSB302
#  CONFIG_USB_PD_TCPM_ANX3429
#  CONFIG_USB_PD_TCPM_ANX740X
#  CONFIG_USB_PD_TCPM_ANX741X
#  CONFIG_USB_PD_TCPM_ANX7688
#  CONFIG_USB_PD_TCPM_MT6370
#  CONFIG_USB_PD_TCPM_FUSB307
#  CONFIG_USB_PD_TCPM_STM32GX
#  CONFIG_USB_PD_TCPM_CCGXXF

endchoice  # Type-C Port Manager (TCPM)

menuconfig PLATFORM_EC_USB_MUX
	bool "USB muxes"
	default y
	help
	  Enables support for USB muxes. These allow multiplexing

if PLATFORM_EC_USB_MUX

config PLATFORM_EC_USB_MUX_AMD_FP6
	bool "AMD FP6 integrated mux"
	help
	  Integrated AMD FP6 mux for USB and DP.  Mux control happens over
	  an i2c channel.

config PLATFORM_EC_USB_MUX_IT5205
	bool "ITE IT5205 USB Type-C 3:2 Alternative mode passive mux"
	help
	  This is a USB Type-C 3:2 Alternative mode mux, supporting USB 3.1
	  Gen 2 10Gbps as well as DisplayPort (DP1.4) at 8Gbps. It provides a
	  cross-point mux for low-speed Side-Band-Use (SBU) pins. The mux can
	  be controlled via I2C.

config PLATFORM_EC_USB_MUX_PS8743
	bool "Parade PS8743 USB-C Host Switch with redriver"
	help
	  This is a Parade USB 3.1 Gen 1 / DisplayPort (DP) Alt Mode
	  High-Bit-Rate 2 (HBR2) redriver. It provides control of switching
	  modes through either GPIO or I2C.

config PLATFORM_EC_USB_MUX_TUSB1044
	bool "TI TUSB1044 USB-C 10 Gbps Linear Redriver"
	help
	  This is a USB Type-C Alt Mode redriver. This supports USB 3.1
	  Gen 2 and DisplayPort 1.4 as Alternate Mode. It Provides GPIO and
	  I2C Control for Channel Direction and Equalization.

endif

config PLATFORM_EC_USBC_SS_MUX
	bool "SuperSpeed mux"
	default y
	help
	  Enable this to support the USB Type-C SuperSpeed Mux. If enabled,
	  the USB stack will call usb_mux_set() to change the mux settings.
	  The board must provide a driver in usb_muxes[] for each port so
	  that this can work.

if PLATFORM_EC_USBC_SS_MUX

config PLATFORM_EC_USB_MUX_RUNTIME_CONFIG
	bool "USB mux runtime config"
	default y
	help
	  Allows the configuration of the USB mux to be set up at runtime. This
	  makes the usb_muxes[] array writable, i.e. not const. It should be
	  declared as such in the board config.

	  This is useful when the board has runtime information that changes
	  the configuration, such as Chromium OS Board Info (CBI set in the
	  factory. Without this, multiple EC images would need to be installed
	  depending on the board.

config PLATFORM_EC_USBC_SS_MUX_DFP_ONLY
	bool "Use SuperSpeed mux only when DFP"
        help
	  Only configure the USB Type-C SuperSpeed Mux when a port is a
	  Downstream Facing Port (DFP). This is needed for chipsets which
	  don't support being an Upstream Facing Port UFP).

config PLATFORM_EC_USB_MUX_VIRTUAL
	bool "USB Mux is virtual"
	depends on PLATFORM_EC_USBC_SS_MUX
	help
	  Enable this if a virtual USB mux is supported on the EC, which is
	  actually handled by the AP. In this case the AP gets an interrupt
	  and is is informed when status changes, via the
	  EC_CMD_USB_PD_MUX_INFO host command.

config PLATFORM_EC_USBC_RETIMER_FW_UPDATE
	bool "Support firmware update of USB Type-C retimers"
	default y
	depends on PLATFORM_EC_USBC_SS_MUX
	help
	   Enable this to support USB Type-C retimer firmware update. Each
	   Type-C retimer indicates its capability of supporting firmware update
	   independently in its usb_mux_driver.

	   During AP boot-up, the AP scans each PD port for retimers but only
	   if there are no Type-C devices attached to the port. The firmware
	   update can only be performed on retimers which show up in the AP
	   thunderbolt device entries.

endif  # PLATFORM_EC_USBC_SS_MUX

config PLATFORM_EC_CONSOLE_CMD_PPC_DUMP
	bool "Console command: ppc_dump"
	depends on PLATFORM_EC_USBC_PPC
	default y
	help
	  Allows dumping of the Power Path Controller (PPC) state, which is
	  basically a list of registers and their values. The actual dump
	  function is driver-specific (the reg_dump member of ppc_drv). By
	  reference to the datasheet for the part this can help you figure out
	  what is going on.

if PLATFORM_EC_USB_PD_TCPM_TCPCI

config PLATFORM_EC_USB_PD_TCPM_ITE_ON_CHIP
	bool "Use on-chip ITE"
	help
	  Use the ITE-series TCPM driver built into the EC chip.

	  This is selected by the ITE USB Type-C drivers. It cannot be set
	  otherwise, even in prj.conf

config PLATFORM_EC_USB_PD_ITE_ACTIVE_PORT_COUNT
	int "Number of ITE USB PD active ports"
	depends on PLATFORM_EC_USB_PD_TCPM_ITE_ON_CHIP
	default 1
	help
	  This sets the number of active USB Power Delivery (USB PD) ports
	  in use on the ITE microcontroller. The active port usage should
	  follow the order of ITE TCPC port index.

config PLATFORM_EC_USB_PD_PPC
	bool "Enable Power Path Control from PD"
	default n
	help
	  Some PD chips have integrated SRC FET and control the SRC/SINK FET
	  from internal GPIOs. Enable this if the Power Path Control is
	  controlled by the PD chip without EC GPIOs.

config PLATFORM_EC_USB_PD_TCPC_RUNTIME_CONFIG
	bool "Type-C Port Controller runtime config"
	default y
	help
	  Allows the configuration of the TCPC to be set up at runtime. This
	  makes the tcpc_config[] array writable, i.e. not const. It should be
	  declared as such in the board config.

	  This is useful when the board has runtime information that sets
	  the configuration, such as Chromium OS Board Info (CBI set in the
	  factory. Without this, multiple EC images would need to be installed
	  depending on the board.

config PLATFORM_EC_USB_PD_TCPM_MULTI_PS8XXX
	bool "Support multiple PS8xxx devices"
	help
	  PS8XXX-series chips are all supported by a single driver. Enable
	  this If a board with the same EC firmware is expected to support
	  multiple products here. Then enable the required PS8xxx options
	  below.

	  In this case the board must provide a function to return the correct
	  product ID actually used by a particular board:

	     uint16_t board_get_ps8xxx_product_id(int port)

	  Supported return values are:

	     PS8705_PRODUCT_ID
	     PS8751_PRODUCT_ID
	     PS8755_PRODUCT_ID
	     PS8805_PRODUCT_ID
	     PS8815_PRODUCT_ID

config PLATFORM_EC_USB_PD_TCPM_ANX7447
	bool "Analogix ANX7447 USB-C Gen 2 Type-C Port Controller"
	select PLATFORM_EC_USB_PD_TCPM_MUX
	help
	  The Analogix ANX7447 is a USB Type-C Port Controller (TCPC)
	  for USB Type-C v1.2 Host, USB3.1 Gen2 and DisplayPort applications.
	  It has an on-chip microcontroller (OCM) to manage the signal
	  switching. It supports Power Delivery Rev. 3.0 and the DisplayPort
	  Alt Mode version 1.4a HBR3.

	  Supported chips are:
	     ANX3447
	     ANX7447

if PLATFORM_EC_USB_PD_TCPM_ANX7447
config PLATFORM_EC_USB_PD_TCPM_ANX7447_AUX_PU_PD
	bool "Enable ANX77447 AUX_N internal PU, and AUX_P internal PD."
	depends on PLATFORM_EC_USB_PD_TCPM_ANX7447
	help
	  Use this config option to enable and internal pullup resistor on the
	  AUX_N and internal pulldown resistor on the AUX_P line. Only use this
	  config option if there are no external pu/pd resistors on these
	  signals. This configuration should be used to avoid noise issues on
	  the DDI1_AUX_N & DDI1_AUX_P signals (b/122873171)

config PLATFORM_EC_USB_PD_TCPM_ANX7447_OCM_ERASE_COMMAND
	bool "Enable console command to erase ANX7447 OCM flash"
	depends on PLATFORM_EC_USB_PD_TCPM_ANX7447
	help
	  Adds an EC console command to erase the ANX7447 OCM flash.
	  Note: this is intended to be a temporary option and won't be needed
	  when ANX7447 are put on boards with OCM already erased
endif # PLATFORM_EC_USB_PD_TCPM_ANX7447

config PLATFORM_EC_USB_PD_TCPM_NCT38XX
	bool "Nuvoton 3807/8 Single/Dual Port Controller with Power Delivery"
	help
	  The NCT38n7/8 is a single/dual-port, USB Type-C Port Controller
	  (TCPC). It incorporates a Power Delivery (PD) PHY with BMC encoding,
	  Protocol logic and USB Type-C Configuration Channel (CC) logic.

config PLATFORM_EC_USB_PD_TCPM_PS8751
	bool "Parade PS8751 USB-C Gen 2 Type-C Port Controller"
	select PLATFORM_EC_USB_PD_TCPM_MUX
	imply PLATFORM_EC_HOSTCMD_I2C_CONTROL
	help
	  The Parade Technologies PS8751 is a USB Type-C Port Controller (TCPC)
	  for USB Type-C Host and DisplayPort applications. It supports
	  Power Delivery Rev. 2.0 and the DisplayPort Alt Mode version 1.0a.

config PLATFORM_EC_USB_PD_TCPM_PS8805
	bool "Parade PS8805 USB-C Gen 2 Type-C Port Controller"
	select PLATFORM_EC_USB_PD_TCPM_MUX
	imply PLATFORM_EC_HOSTCMD_I2C_CONTROL
	help
	  The Parade Technologies PS8805 is an active retiming/redriving
	  (respectively for USB 3.1 Gen 2 / DisplayPort 1.4a HBR3) integrated
	  with a USB Type-C Port Controller (TCPC) for USB Type-C Host and
	  DisplayPort applications. It supports Power Delivery and the
	  DisplayPort Alt Mode.

if PLATFORM_EC_USB_PD_TCPM_PS8805
config PLATFORM_EC_USB_PD_TCPM_PS8805_FORCE_DID
	bool "Parade PS8805 Force Device ID"
	default y
	help
	  Early firmware versions of the PS8805 report an incorrect device ID
	  value for A3 silicon. Enable this option to check the vendor specific
	  chip version register and force the correct device ID.
endif # PLATFORM_EC_USB_PD_TCPM_PS8805

config PLATFORM_EC_USB_PD_TCPM_PS8815
	bool "Parade PS8815 USB-C Gen 2 Type-C Port Controller"
	select PLATFORM_EC_USB_PD_TCPM_MUX
	imply PLATFORM_EC_HOSTCMD_I2C_CONTROL
	help
	  The Parade Technologies PS8815 is an active retiming/redriving
	  (respectively for USB 3.1 Gen 2 / DisplayPort 1.4a HBR3) integrated
	  with a USB Type-C Port Controller (TCPC) for USB Type-C Host and
	  DisplayPort applications. It supports Power Delivery and the
	  DisplayPort Alt Mode.

if PLATFORM_EC_USB_PD_TCPM_PS8815
config PLATFORM_EC_USB_PD_TCPM_PS8815_FORCE_DID
	bool "Parade PS8815 Force Device ID"
	default y
	help
	  Early firmware versions of the PS8815 report an incorrect device ID
	  value for A1 silicon. Enable this option to check the vendor specific
	  chip version register and force the correct device ID.
endif # PLATFORM_EC_USB_PD_TCPM_PS8815

config PLATFORM_EC_USB_PD_TCPM_RAA489000
  bool "Renesas RAA489000 Type-C port controller and battery charger"
  select PLATFORM_EC_USB_PD_PPC
  help
    Build drivers for the RAA489000, a combined battery charger and USB-C
    TCPCI.

config PLATFORM_EC_USB_PD_TCPM_RT1715
	bool "Richtek RT1715 Type-C Port Controller"
	help
	  The RT1715 is a USB Type-C controller, integrating a complete Type-C
	  Transceiver including the Rp and Rd resistors. It does the USB Type-C
	  detection including attach and orientation. The RT1715 integrates the
	  physical layer of the USB BMC power delivery protocol to allow up to
	  100W of power and role swap. The BMC PD block enables full support
	  for alternative interfaces of the Type-C specification.

config PLATFORM_EC_USB_PD_TCPM_RT1718S
	bool "Richtek RT1718S Type-C Port Controller"
	select PLATFORM_EC_USBC_PPC_RT17182S
	help
	  The RT1718S is an integrated USB Type-C TCPC controller which
	  includes IEC-61000-4-2 ESD protection cell for CC/SBU/DP/DM.
	  High voltage USB 2.0 switches also support HV DCP & fast charging
	  protocols. RT1718S supports TCPC Version 1.2, and Battery Charging
	  version 1.2 (BC1.2).

config PLATFORM_EC_USB_PD_TCPM_TUSB422
	bool "TI TUSB422 Port Control with USB PD"
	help
	  This is a a USB PD PHY that enables a USB Type-C port with the
	  Configuration Channel (CC) logic needed for USB Type-C ecosystems. It
	  integrates the physical layer of the USB BMC power delivery (PD)
	  protocol to allow up to 100-W of power and support for alternate mode
	  interfaces. An external microprocessor, containing USB Type-C Port
	  Manager (TCPM), communicates with the TUSB422 through an I2C
	  interface.

config PLATFORM_EC_USB_PD_TCPM_MUX
	bool "Support optional register 18h steer the high-speed muxes"
	help
	  Enable this option if the TCPC port controller supports the optional
	  register 18h CONFIG_STANDARD_OUTPUT to steer the high-speed muxes.

	  See section 4.4.4 (CONFIGURE STANDARD OUTPUT) of the USB Type-C Port
	  Controller Interface Specification, Revision 2.0, Version 1.2 for more
	  information.

config PLATFORM_EC_CONSOLE_CMD_TCPC_DUMP
	bool "Console command: tcpc_dump"
	# anx7447 also supports this command, but is not yet enabled
	default y
	help
	  Allows dumping of the Type-C Port Controller (TCPC) state, which is
	  basically a list of registers and their values. By reference to the
	  Universal Serial Bus Type-C Port Controller Interface Specification
	  this can help you figure out what is going on.

endif  # PLATFORM_EC_USB_PD_TCPM_TCPCI

config PLATFORM_EC_USB_PD_TCPM_DRIVER_IT83XX
	bool "Enable IT83XX driver"
	depends on PLATFORM_EC_USB_PD_TCPM_ITE_ON_CHIP
	help
	  Enable a driver for the ITE IT83XX on-chip UBB Type-C Port Manager.
	  This supports up to two USB Type-C ports with Dual Role function
	  (provider and consumer) and Fast Role Swap detection.

config PLATFORM_EC_USB_PD_TCPM_DRIVER_IT8XXX2
	bool "Enable IT8XXX2 driver"
	depends on PLATFORM_EC_USB_PD_TCPM_ITE_ON_CHIP
	help
	  Enable a driver for the ITE IT8XXX2 on-chip UBB Type-C Port Manager.
	  This supports up to two USB Type-C ports with Dual Role function
	  (provider and consumer) and Fast Role Swap detection.

config PLATFORM_EC_USB_PD_PULLUP
	int "Default source Rp value"
	default 1
	help
	  Default pull-up value on the USB-C ports when they are used as source.
	  Valid values are 0 (USB default current), 1 (1.5A), and 2 (3.0A). See
	  enum tcpc_rp_value.

config PLATFORM_EC_USB_PD_ONLY_FIXED_PDOS
	bool "Only support FIXED type PDOs"
	help
	  Ignore all non-fixed PDOs received from a src_caps message. Enable
	  this for boards (like servo_v4) which only support FIXED PDO types.

config PLATFORM_EC_USB_CHARGER
	bool "Support charging from a USB-C port"
	default y
	select HAS_TASK_USB_CHG_P0
	help
	  This enables common BC1.2 (Battery-Charging Specification Rev1.2)
	  charger-detection routines. With this is possible to negotiate a
	  power contract with an attached battery charger and use this to
	  charge the device's battery.

if PLATFORM_EC_USB_CHARGER

config PLATFORM_EC_BC12_DETECT_PI3USB9201
	bool "Enable support for Pericom PI3USB9201"
	help
	  This is a Dual-Role USB Charging-Type Detector. It can operate in
	  host or client mode. It supports Battery Charging Specification, rev
	  1.2 (BC1.2) with Standard/Charging/Dedicated downstream port
	  (SDP/CDP/DCP) advertisement when in host mode. In client mode it
	  starts BC1.2 detection to detect the attached host type. It provides
	  an I2C interface to report detection results.

config PLATFORM_EC_BC12_DETECT_MT6360
	bool "MediaTek MT6360P PMIC"
	help
	  This PMIC includes a battery charger with an On-The-Go (OTG) output
	  range of 4.85 to 5.825V. It provides integrated ADCs for system
	  monitoring. The MT6360 also supports USB Power Delivery 3.0 with
	  Dual-Role, with host or client mode. It supports alternate mode as
	  well as VCONN with programmable over-current protection (OCP).

config PLATFORM_EC_MT6360_BC12_GPIO
	bool "USB-PHY connection is controlled by a GPIO"
	depends on PLATFORM_EC_BC12_DETECT_MT6360
	help
	  If enabled, the MT6360 USB-PHY connection is controlled by
	  a GPIO: GPIO_BC12_DET_EN. Assert GPIO_BC12_DET_EN to detect a BC1.2
	  device, and deassert GPIO_BC12_DET_EN to mux the USB-PHY back.

config PLATFORM_EC_BC12_SINGLE_DRIVER
	bool "Only support a single BC12 driver"
	default y
	help
	  Enable this if the board only needs one BC12 driver. This includes
	  the case that has multiple chips that use the same driver.

	  If undefined, the board should define a bc12_ports[] array which
	  associates each port to its bc12 driver:

	     struct bc12_config bc12_ports[CONFIG_USB_PD_PORT_MAX_COUNT] = {
	        { .drv = &xxx_drv },
	        { .drv = &yyy_drv },
	     };

endif  # PLATFORM_EC_USB_CHARGER

endif  # PLATFORM_EC_USBC
